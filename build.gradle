buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE'
        classpath 'gradle.plugin.com.jamesward:atom-gradle-plugin:0.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'com.jamesward.atomgradleplugin'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-websocket:1.3.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.3.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-devtools:1.3.3.RELEASE'
    compile 'org.webjars.bower:sockjs-client:1.0.3'
    compile 'org.webjars.bower:jquery:3.3.6'
    compile 'org.webjars.bower:bootstrap:3.3.6'
    compile 'org.webjars.bower:flot:0.8.3'
    compile 'org.webjars.bower:jquery:2.2.2'
}

compileJava.dependsOn processResources

allprojects {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

springBoot {
    mainClass = 'com.example.WebApp'
    layout = 'ZIP'
}

bootRepackage {
    mainClass = 'org.springframework.boot.loader.PropertiesLauncher'
}

atom {
    filesToOpen = ['README.md']
    packages = ['heroku-tools']
}

import org.gradle.internal.os.OperatingSystem

task devClasses(type: Exec) {
    if (OperatingSystem.current().isWindows())
        commandLine 'gradlew', '-t', 'classes'
    else
        commandLine './gradlew', '-t', 'classes'
}

task devBootRun(type: Exec) {
    if (OperatingSystem.current().isWindows())
        commandLine 'gradlew', 'bootRun'
    else
        commandLine './gradlew', 'bootRun'
}

import java.util.concurrent.*

task dev() << {
    def devClassesFuture = Executors.newSingleThreadExecutor().submit({ devClasses.execute() } as Callable)
    def devBootRunFuture = Executors.newSingleThreadExecutor().submit({ devBootRun.execute() } as Callable)
    devClassesFuture?.get()
    devBootRunFuture?.get()
}

tasks.dev.dependsOn tasks.atom

task stage {
    dependsOn build
}

defaultTasks 'dev'
